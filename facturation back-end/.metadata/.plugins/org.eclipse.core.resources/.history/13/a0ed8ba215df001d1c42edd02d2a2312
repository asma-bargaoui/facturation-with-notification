package com.app.security.services;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.app.models.Application;
import com.app.models.Convension;
import com.app.models.Structure;
import com.app.repository.ApplicationRepository;
import com.app.repository.ConvensionRepository;
import com.app.repository.StructureRepository;

import payload.request.ConvensionRequest;
import payload.response.ConvensionResponse;

@Service
public class ConvensionService {
	@Autowired 
	ConvensionRepository convensionRepo;
	private final ConvensionRepository convensionRepository;
	
    @Autowired
    private ApplicationRepository applicationRepository;
    
    @Autowired
    private StructureRepository structureRepository;
    
    private static final int MAX_DURATION_YEARS = 3;
    
    public ConvensionService(ConvensionRepository convensionRepository) {
        this.convensionRepository = convensionRepository;
    }
    
    public ConvensionResponse createConvension(ConvensionRequest request) {
        String applicationCode = request.getApplicationCode();
        String structureMinistere = request.getStructureCode();

        Application application = applicationRepository.findByCode(applicationCode)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Application not found"));

        Structure structure = structureRepository.findByMinistere(structureMinistere)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Structure not found"));
        
        LocalDate expirationDate = calculateExpirationDate(request);
        
        Convension convension = new Convension();
        convension.setApplication(application);
        convension.setStructure(structure);
        convension.setNbr_reel(request.getNbr_reel());
        convension.setTotalAmount(request.getNbr_reel().multiply(application.getPrix()));
        LocalDateTime signatureDateTime = request.getSignatureDate().toLocalDate().atStartOfDay();
        convension.setDateSignature(signatureDateTime);
        int dureeConvension = request.getConvensionDurationInDays();
        
        
        //Save the convension to the database
        convensionRepository.save(convension);

      //Create a ConvensionResponse object with the required fields
        ConvensionResponse response = new ConvensionResponse(application.getCode(), structure.getMinistere(),
                application.getPrix(), request.getNbr_reel(), convension.getTotalAmount(),convension.getDateSignature());

        return response;
        
    }
    public LocalDate calculateExpirationDate(ConvensionRequest request) {
    	String durationString = request.getConvensionDuration();
        int durationInDays = 0;
        if (durationString.contains("jour")) {
            durationInDays = Integer.parseInt(durationString.split(" ")[0]);
        } else if (durationString.contains("mois")) {
            durationInDays = Integer.parseInt(durationString.split(" ")[0]) * 30;
        } else if (durationString.contains("annee")) {
            durationInDays = Integer.parseInt(durationString.split(" ")[0]) * 365;
        } else {
            throw new IllegalArgumentException("Invalid duration format: " + durationString);
        }
        // Limit the duration to a maximum of 3 years
        durationInDays = Math.min(durationInDays, 3 * 365);
        return LocalDate.now().plusDays(durationInDays);
    }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
 /* public Convension createConvension(ConvensionRequest request) {
        String applicationCode = request.getApplicationCode();
        String structureMinistere = request.getStructureCode();

        // Retrieve the application from the database using the application code
        Application application = applicationRepository.findByCode(applicationCode)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Application not found"));

        // Retrieve the structure from the database using the ministry structure name
        Structure structure = structureRepository.findByMinistere(structureMinistere)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Structure not found"));
       
        
    
        // Create a new Convension object with the validated fields
        Convension convension = new Convension();
        convension.setApplication(application);
        convension.setStructure(structure);
        convension.setNbr_reel(request.getNbr_reel());
        
        
       
        
        //Save the convension to the database
       return convensionRepository.save(convension);
        
       /* ConvensionResponse response = new ConvensionResponse(
                convension.getApplication(),
                convension.getStructure(),
                applicationPrice
        );

        return response;
    }*/

   
    
    
    
    
    
    
    
    
}